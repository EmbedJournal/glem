.TH GLEM 1

.SH NAME

glem \- Tiny grapical LCD emulator for embedded platorms.

.SH SYNOPSIS

.B glem
\fB\-r \fR\fIRESOLUTION\fR
[[\fB\-s \fR\fISCALE_FACTOR\fR]
.IR  OPTIONS ...]

.SH DESCRIPTION

.BR glem
a tiny grapical LCD emulator for embedded platforms and other small projects
that need a one-off GUI to display some data without having to write too much
GUI Code.

.B Data Encoding:
.br
Most commercially available GLCDs are 1 bit per pixel packed into bytes in two
different ways.

.br
1. \fIRow Major\fR - MSB of first byte is pixel (0,0) and LSB is pixel (7,0). Second
byte represents pixels (8,0) to (15,0) and so on.
.br
2. \fIColumn Major\fR - MSB of first byte is pixel (0,0) and LSB is pixel (0,7).
Second byte represents pixels (1,0) to (1,7) and so on.

.br
In both cases, typical application layer code has an array to store the bit map
value. The length of the array would be,

.B buf_len = glcd_width/8 * glcd_height;

.br
This buffer is what your embedded device writes out to the GCLD through the
SPI/I2C bus. The glem server expects to receive this buffer to render the
image.

.br
In your application you will have switch low level SPI/I2C driver calls with
some mock functions provided here. Then compile your GLCD layer on GCC and run
it to see the rendered display. Once all you testing has been completed, you
can switch back to writing data to SPI/I2C.

.SH OPTIONS

.TP
.BR \-r\ \fIRESOLUTION\fR
Resolution of GLCD in the format \fIWIDTH\fRx\fIHEIGHT\fR. So a GLCD with width
128 pixels and height 64 pixels will call glem with -r 128x64
.TP
.BR \-s\ \fISCALE_FACTOR\fR
Specify a pixel scale value. Each pixel on your GLCD is represented by a
cluster pixels in the shape of a square of side SCALE_FACTOR. Default is 1:2
sacaling, same as -s2
.TP
.BR \-t\ \fITEST_VAL\fR
Send some test data to glem server to check if everything is okay. Wrting
number (byte) will turn on pixels based on the binay pattern of the number that
was sent. So an option -t0 will turn off all pixels and similarly -t255 will
turn on all of it.
.TP
.BR \-v\ \fIVERBOSE\fR
Display verbose debug outupt. When set, application doesn't go to
background.
.TP
.BR \-h\ \fIHELP\fR
Display a short help message.\fR

.SH EXAMPLE

To launch a new server instance for a 128x64 display at a 1:3 scaling,
.br
$ glem -r 128x64 -s3

.br
To test a running server (draw vertical lines)\fR
.br
$ glem -r 128x64 -t87\fR

.SH BUGS
.Tr
Report bugs to <siddharth@embedjournal.com> or Create an issue at
https://github.com/cbsiddharth/glem.git/

.SH AUTHOR
.TP
Written by Siddharth Chandrasekaran <siddharth@embedjournal.com>.

